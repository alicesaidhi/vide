type p<T> = T?|()->T
type e<T=()->()> = T?
type a={priority: number, callback: (Instance) -> ()}
type recursive<T> =T|{recursive<T>}type c<T> =a|T|Recursive<Instance>|()->Recursive<Instance>
type ContentId = string
type Dictionary = {[string]: any}
type Array = {any}
export type vCanvasGroup = {
	GroupColor3: p<Color3>,
	GroupTransparency: p<number>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vCanvasGroup>

}
export type vFrame = {
	Style: p<Enum.FrameStyle>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vFrame>

}
export type vImageButton = {
	HoverImage: p<ContentId>,
	Image: p<ContentId>,
	ImageColor3: p<Color3>,
	ImageRectOffset: p<Vector2>,
	ImageRectSize: p<Vector2>,
	ImageTransparency: p<number>,
	PressedImage: p<ContentId>,
	ResampleMode: p<Enum.ResamplerMode>,
	ScaleType: p<Enum.ScaleType>,
	SliceCenter: p<Rect>,
	SliceScale: p<number>,
	TileSize: p<UDim2>,
	AutoButtonColor: p<boolean>,
	Modal: p<boolean>,
	Selected: p<boolean>,
	Style: p<Enum.ButtonStyle>,
	Activated: e<(inputObject:InputObject,clickCount:number) -> ()>,
	MouseButton1Click: e<() -> ()>,
	MouseButton1Down: e<(x:number,y:number) -> ()>,
	MouseButton1Up: e<(x:number,y:number) -> ()>,
	MouseButton2Click: e<() -> ()>,
	MouseButton2Down: e<(x:number,y:number) -> ()>,
	MouseButton2Up: e<(x:number,y:number) -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vImageButton>

}
export type vTextButton = {
	Font: p<Enum.Font>,
	FontFace: p<Font>,
	LineHeight: p<number>,
	MaxVisibleGraphemes: p<number>,
	OpenTypeFeatures: p<string | number>,
	RichText: p<boolean>,
	Text: p<string | number>,
	TextColor3: p<Color3>,
	TextDirection: p<Enum.TextDirection>,
	TextScaled: p<boolean>,
	TextSize: p<number>,
	TextStrokeColor3: p<Color3>,
	TextStrokeTransparency: p<number>,
	TextTransparency: p<number>,
	TextTruncate: p<Enum.TextTruncate>,
	TextWrapped: p<boolean>,
	TextXAlignment: p<Enum.TextXAlignment>,
	TextYAlignment: p<Enum.TextYAlignment>,
	AutoButtonColor: p<boolean>,
	Modal: p<boolean>,
	Selected: p<boolean>,
	Style: p<Enum.ButtonStyle>,
	Activated: e<(inputObject:InputObject,clickCount:number) -> ()>,
	MouseButton1Click: e<() -> ()>,
	MouseButton1Down: e<(x:number,y:number) -> ()>,
	MouseButton1Up: e<(x:number,y:number) -> ()>,
	MouseButton2Click: e<() -> ()>,
	MouseButton2Down: e<(x:number,y:number) -> ()>,
	MouseButton2Up: e<(x:number,y:number) -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vTextButton>

}
export type vImageLabel = {
	Image: p<ContentId>,
	ImageColor3: p<Color3>,
	ImageRectOffset: p<Vector2>,
	ImageRectSize: p<Vector2>,
	ImageTransparency: p<number>,
	ResampleMode: p<Enum.ResamplerMode>,
	ScaleType: p<Enum.ScaleType>,
	SliceCenter: p<Rect>,
	SliceScale: p<number>,
	TileSize: p<UDim2>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vImageLabel>

}
export type vTextLabel = {
	Font: p<Enum.Font>,
	FontFace: p<Font>,
	LineHeight: p<number>,
	MaxVisibleGraphemes: p<number>,
	OpenTypeFeatures: p<string | number>,
	RichText: p<boolean>,
	Text: p<string | number>,
	TextColor3: p<Color3>,
	TextDirection: p<Enum.TextDirection>,
	TextScaled: p<boolean>,
	TextSize: p<number>,
	TextStrokeColor3: p<Color3>,
	TextStrokeTransparency: p<number>,
	TextTransparency: p<number>,
	TextTruncate: p<Enum.TextTruncate>,
	TextWrapped: p<boolean>,
	TextXAlignment: p<Enum.TextXAlignment>,
	TextYAlignment: p<Enum.TextYAlignment>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vTextLabel>

}
export type vScrollingFrame = {
	AutomaticCanvasSize: p<Enum.AutomaticSize>,
	BottomImage: p<ContentId>,
	CanvasPosition: p<Vector2>,
	CanvasSize: p<UDim2>,
	ElasticBehavior: p<Enum.ElasticBehavior>,
	HorizontalScrollBarInset: p<Enum.ScrollBarInset>,
	MidImage: p<ContentId>,
	ScrollBarImageColor3: p<Color3>,
	ScrollBarImageTransparency: p<number>,
	ScrollBarThickness: p<number>,
	ScrollingDirection: p<Enum.ScrollingDirection>,
	ScrollingEnabled: p<boolean>,
	TopImage: p<ContentId>,
	VerticalScrollBarInset: p<Enum.ScrollBarInset>,
	VerticalScrollBarPosition: p<Enum.VerticalScrollBarPosition>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vScrollingFrame>

}
export type vTextBox = {
	ClearTextOnFocus: p<boolean>,
	CursorPosition: p<number>,
	Font: p<Enum.Font>,
	FontFace: p<Font>,
	LineHeight: p<number>,
	MaxVisibleGraphemes: p<number>,
	MultiLine: p<boolean>,
	OpenTypeFeatures: p<string | number>,
	PlaceholderColor3: p<Color3>,
	PlaceholderText: p<string | number>,
	RichText: p<boolean>,
	SelectionStart: p<number>,
	ShowNativeInput: p<boolean>,
	Text: p<string | number>,
	TextColor3: p<Color3>,
	TextDirection: p<Enum.TextDirection>,
	TextEditable: p<boolean>,
	TextScaled: p<boolean>,
	TextSize: p<number>,
	TextStrokeColor3: p<Color3>,
	TextStrokeTransparency: p<number>,
	TextTransparency: p<number>,
	TextTruncate: p<Enum.TextTruncate>,
	TextWrapped: p<boolean>,
	TextXAlignment: p<Enum.TextXAlignment>,
	TextYAlignment: p<Enum.TextYAlignment>,
	FocusLost: e<(enterPressed:boolean,inputThatCausedFocusLoss:InputObject) -> ()>,
	Focused: e<() -> ()>,
	ReturnPressedFromOnScreenKeyboard: e<() -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vTextBox>

}
export type vVideoFrame = {
	Looped: p<boolean>,
	Playing: p<boolean>,
	TimePosition: p<number>,
	Video: p<ContentId>,
	Volume: p<number>,
	DidLoop: e<(video:string | number) -> ()>,
	Ended: e<(video:string | number) -> ()>,
	Loaded: e<(video:string | number) -> ()>,
	Paused: e<(video:string | number) -> ()>,
	Played: e<(video:string | number) -> ()>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vVideoFrame>

}
export type vViewportFrame = {
	Ambient: p<Color3>,
	CurrentCamera: p<Camera?>,
	ImageColor3: p<Color3>,
	ImageTransparency: p<number>,
	LightColor: p<Color3>,
	LightDirection: p<Vector3>,
	Active: p<boolean>,
	AnchorPoint: p<Vector2>,
	AutomaticSize: p<Enum.AutomaticSize>,
	BackgroundColor3: p<Color3>,
	BackgroundTransparency: p<number>,
	BorderColor3: p<Color3>,
	BorderMode: p<Enum.BorderMode>,
	BorderSizePixel: p<number>,
	ClipsDescendants: p<boolean>,
	Interactable: p<boolean>,
	LayoutOrder: p<number>,
	NextSelectionDown: p<GuiObject?>,
	NextSelectionLeft: p<GuiObject?>,
	NextSelectionRight: p<GuiObject?>,
	NextSelectionUp: p<GuiObject?>,
	Position: p<UDim2>,
	Rotation: p<number>,
	Selectable: p<boolean>,
	SelectionImageObject: p<GuiObject?>,
	SelectionOrder: p<number>,
	Size: p<UDim2>,
	SizeConstraint: p<Enum.SizeConstraint>,
	Transparency: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	InputBegan: e<(input:InputObject) -> ()>,
	InputChanged: e<(input:InputObject) -> ()>,
	InputEnded: e<(input:InputObject) -> ()>,
	MouseEnter: e<(x:number,y:number) -> ()>,
	MouseLeave: e<(x:number,y:number) -> ()>,
	MouseMoved: e<(x:number,y:number) -> ()>,
	MouseWheelBackward: e<(x:number,y:number) -> ()>,
	MouseWheelForward: e<(x:number,y:number) -> ()>,
	SelectionGained: e<() -> ()>,
	SelectionLost: e<() -> ()>,
	TouchLongPress: e<(touchPositions:{Vector2},state:Enum.UserInputState) -> ()>,
	TouchPan: e<(touchPositions:{Vector2},totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	TouchPinch: e<(touchPositions:{Vector2},scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchRotate: e<(touchPositions:{Vector2},rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	TouchSwipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	TouchTap: e<(touchPositions:{Vector2}) -> ()>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vViewportFrame>

}
export type vBillboardGui = {
	Active: p<boolean>,
	Adornee: p<Instance?>,
	AlwaysOnTop: p<boolean>,
	Brightness: p<number>,
	ClipsDescendants: p<boolean>,
	DistanceLowerLimit: p<number>,
	DistanceStep: p<number>,
	DistanceUpperLimit: p<number>,
	ExtentsOffset: p<Vector3>,
	ExtentsOffsetWorldSpace: p<Vector3>,
	LightInfluence: p<number>,
	MaxDistance: p<number>,
	PlayerToHideFrom: p<Instance?>,
	Size: p<UDim2>,
	SizeOffset: p<Vector2>,
	StudsOffset: p<Vector3>,
	StudsOffsetWorldSpace: p<Vector3>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vBillboardGui>

}
export type vScreenGui = {
	ClipToDeviceSafeArea: p<boolean>,
	DisplayOrder: p<number>,
	IgnoreGuiInset: p<boolean>,
	SafeAreaCompatibility: p<Enum.SafeAreaCompatibility>,
	ScreenInsets: p<Enum.ScreenInsets>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vScreenGui>

}
export type vAdGui = {
	AdShape: p<Enum.AdShape>,
	EnableVideoAds: p<boolean>,
	FallbackImage: p<ContentId>,
	Active: p<boolean>,
	Adornee: p<Instance?>,
	Face: p<Enum.NormalId>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vAdGui>

}
export type vSurfaceGui = {
	AlwaysOnTop: p<boolean>,
	Brightness: p<number>,
	CanvasSize: p<Vector2>,
	ClipsDescendants: p<boolean>,
	LightInfluence: p<number>,
	MaxDistance: p<number>,
	PixelsPerStud: p<number>,
	SizingMode: p<Enum.SurfaceGuiSizingMode>,
	ToolPunchThroughDistance: p<number>,
	ZOffset: p<number>,
	Active: p<boolean>,
	Adornee: p<Instance?>,
	Face: p<Enum.NormalId>,
	Enabled: p<boolean>,
	ResetOnSpawn: p<boolean>,
	ZIndexBehavior: p<Enum.ZIndexBehavior>,
	AutoLocalize: p<boolean>,
	RootLocalizationTable: p<LocalizationTable?>,
	SelectionBehaviorDown: p<Enum.SelectionBehavior>,
	SelectionBehaviorLeft: p<Enum.SelectionBehavior>,
	SelectionBehaviorRight: p<Enum.SelectionBehavior>,
	SelectionBehaviorUp: p<Enum.SelectionBehavior>,
	SelectionGroup: p<boolean>,
	SelectionChanged: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vSurfaceGui>

}
export type vSelectionBox = {
	LineThickness: p<number>,
	SurfaceColor3: p<Color3>,
	SurfaceTransparency: p<number>,
	Adornee: p<Instance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vSelectionBox>

}
export type vBoxHandleAdornment = {
	Size: p<Vector3>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vBoxHandleAdornment>

}
export type vConeHandleAdornment = {
	Height: p<number>,
	Radius: p<number>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vConeHandleAdornment>

}
export type vCylinderHandleAdornment = {
	Angle: p<number>,
	Height: p<number>,
	InnerRadius: p<number>,
	Radius: p<number>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vCylinderHandleAdornment>

}
export type vImageHandleAdornment = {
	Image: p<ContentId>,
	Size: p<Vector2>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vImageHandleAdornment>

}
export type vLineHandleAdornment = {
	Length: p<number>,
	Thickness: p<number>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vLineHandleAdornment>

}
export type vSphereHandleAdornment = {
	Radius: p<number>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vSphereHandleAdornment>

}
export type vWireframeHandleAdornment = {
	Scale: p<Vector3>,
	AdornCullingMode: p<Enum.AdornCullingMode>,
	AlwaysOnTop: p<boolean>,
	CFrame: p<CFrame>,
	SizeRelativeOffset: p<Vector3>,
	ZIndex: p<number>,
	MouseButton1Down: e<() -> ()>,
	MouseButton1Up: e<() -> ()>,
	MouseEnter: e<() -> ()>,
	MouseLeave: e<() -> ()>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vWireframeHandleAdornment>

}
export type vParabolaAdornment = {
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vParabolaAdornment>

}
export type vSelectionSphere = {
	SurfaceColor3: p<Color3>,
	SurfaceTransparency: p<number>,
	Adornee: p<PVInstance?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vSelectionSphere>

}
export type vArcHandles = {
	Axes: p<Axes>,
	MouseButton1Down: e<(axis:Enum.Axis) -> ()>,
	MouseButton1Up: e<(axis:Enum.Axis) -> ()>,
	MouseDrag: e<(axis:Enum.Axis,relativeAngle:number,deltaRadius:number) -> ()>,
	MouseEnter: e<(axis:Enum.Axis) -> ()>,
	MouseLeave: e<(axis:Enum.Axis) -> ()>,
	Adornee: p<BasePart?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vArcHandles>

}
export type vHandles = {
	Faces: p<Faces>,
	Style: p<Enum.HandlesStyle>,
	MouseButton1Down: e<(face:Enum.NormalId) -> ()>,
	MouseButton1Up: e<(face:Enum.NormalId) -> ()>,
	MouseDrag: e<(face:Enum.NormalId,distance:number) -> ()>,
	MouseEnter: e<(face:Enum.NormalId) -> ()>,
	MouseLeave: e<(face:Enum.NormalId) -> ()>,
	Adornee: p<BasePart?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vHandles>

}
export type vSurfaceSelection = {
	TargetSurface: p<Enum.NormalId>,
	Adornee: p<BasePart?>,
	Color3: p<Color3>,
	Transparency: p<number>,
	Visible: p<boolean>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vSurfaceSelection>

}
export type vPath2D = {
	Closed: p<boolean>,
	Color3: p<Color3>,
	Thickness: p<number>,
	Visible: p<boolean>,
	ZIndex: p<number>,
	ControlPointChanged: e<() -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vPath2D>

}
export type vUIAspectRatioConstraint = {
	AspectRatio: p<number>,
	AspectType: p<Enum.AspectType>,
	DominantAxis: p<Enum.DominantAxis>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIAspectRatioConstraint>

}
export type vUISizeConstraint = {
	MaxSize: p<Vector2>,
	MinSize: p<Vector2>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUISizeConstraint>

}
export type vUITextSizeConstraint = {
	MaxTextSize: p<number>,
	MinTextSize: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUITextSizeConstraint>

}
export type vUICorner = {
	CornerRadius: p<UDim>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUICorner>

}
export type vUIDragDetector = {
	ActivatedCursorIcon: p<ContentId>,
	BoundingBehavior: p<Enum.UIDragDetectorBoundingBehavior>,
	BoundingUI: p<GuiBase2d?>,
	CursorIcon: p<ContentId>,
	DragAxis: p<Vector2>,
	DragRelativity: p<Enum.UIDragDetectorDragRelativity>,
	DragRotation: p<number>,
	DragSpace: p<Enum.UIDragDetectorDragSpace>,
	DragStyle: p<Enum.UIDragDetectorDragStyle>,
	DragUDim2: p<UDim2>,
	Enabled: p<boolean>,
	MaxDragAngle: p<number>,
	MaxDragTranslation: p<UDim2>,
	MinDragAngle: p<number>,
	MinDragTranslation: p<UDim2>,
	ReferenceUIInstance: p<GuiObject?>,
	ResponseStyle: p<Enum.UIDragDetectorResponseStyle>,
	SelectionModeDragSpeed: p<UDim2>,
	SelectionModeRotateSpeed: p<number>,
	UIDragSpeedAxisMapping: p<Enum.UIDragSpeedAxisMapping>,
	DragContinue: e<(inputPosition:Vector2) -> ()>,
	DragEnd: e<(inputPosition:Vector2) -> ()>,
	DragStart: e<(inputPosition:Vector2) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIDragDetector>

}
export type vUIFlexItem = {
	FlexMode: p<Enum.UIFlexMode>,
	GrowRatio: p<number>,
	ItemLineAlignment: p<Enum.ItemLineAlignment>,
	ShrinkRatio: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIFlexItem>

}
export type vUIGradient = {
	Color: p<ColorSequence>,
	Enabled: p<boolean>,
	Offset: p<Vector2>,
	Rotation: p<number>,
	Transparency: p<NumberSequence>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIGradient>

}
export type vUIListLayout = {
	HorizontalFlex: p<Enum.UIFlexAlignment>,
	ItemLineAlignment: p<Enum.ItemLineAlignment>,
	Padding: p<UDim>,
	VerticalFlex: p<Enum.UIFlexAlignment>,
	Wraps: p<boolean>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIListLayout>

}
export type vUIGridLayout = {
	CellPadding: p<UDim2>,
	CellSize: p<UDim2>,
	FillDirectionMaxCells: p<number>,
	StartCorner: p<Enum.StartCorner>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIGridLayout>

}
export type vUIPageLayout = {
	Animated: p<boolean>,
	Circular: p<boolean>,
	EasingDirection: p<Enum.EasingDirection>,
	EasingStyle: p<Enum.EasingStyle>,
	GamepadInputEnabled: p<boolean>,
	Padding: p<UDim>,
	ScrollWheelInputEnabled: p<boolean>,
	TouchInputEnabled: p<boolean>,
	TweenTime: p<number>,
	PageEnter: e<(page:Instance?) -> ()>,
	PageLeave: e<(page:Instance?) -> ()>,
	Stopped: e<(currentPage:Instance?) -> ()>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIPageLayout>

}
export type vUITableLayout = {
	FillEmptySpaceColumns: p<boolean>,
	FillEmptySpaceRows: p<boolean>,
	MajorAxis: p<Enum.TableMajorAxis>,
	Padding: p<UDim2>,
	FillDirection: p<Enum.FillDirection>,
	HorizontalAlignment: p<Enum.HorizontalAlignment>,
	SortOrder: p<Enum.SortOrder>,
	VerticalAlignment: p<Enum.VerticalAlignment>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUITableLayout>

}
export type vUIPadding = {
	PaddingBottom: p<UDim>,
	PaddingLeft: p<UDim>,
	PaddingRight: p<UDim>,
	PaddingTop: p<UDim>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIPadding>

}
export type vUIScale = {
	Scale: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIScale>

}
export type vUIStroke = {
	ApplyStrokeMode: p<Enum.ApplyStrokeMode>,
	Color: p<Color3>,
	Enabled: p<boolean>,
	LineJoinMode: p<Enum.LineJoinMode>,
	Thickness: p<number>,
	Transparency: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vUIStroke>

}
export type vWorldModel = {
	ModelStreamingMode: p<Enum.ModelStreamingMode>,
	PrimaryPart: p<BasePart?>,
	WorldPivot: p<CFrame>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vWorldModel>

}
export type vCamera = {
	CFrame: p<CFrame>,
	CameraSubject: p<Instance?>,
	CameraType: p<Enum.CameraType>,
	DiagonalFieldOfView: p<number>,
	FieldOfView: p<number>,
	FieldOfViewMode: p<Enum.FieldOfViewMode>,
	Focus: p<CFrame>,
	HeadLocked: p<boolean>,
	HeadScale: p<number>,
	MaxAxisFieldOfView: p<number>,
	VRTiltAndRollEnabled: p<boolean>,
	InterpolationFinished: e<() -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vCamera>

}
export type vPart = {
	Shape: p<Enum.PartType>,
	Anchored: p<boolean>,
	AssemblyAngularVelocity: p<Vector3>,
	AssemblyLinearVelocity: p<Vector3>,
	BackSurface: p<Enum.SurfaceType>,
	BottomSurface: p<Enum.SurfaceType>,
	BrickColor: p<BrickColor>,
	CFrame: p<CFrame>,
	CanCollide: p<boolean>,
	CanQuery: p<boolean>,
	CanTouch: p<boolean>,
	CastShadow: p<boolean>,
	CollisionGroup: p<string | number>,
	Color: p<Color3>,
	CustomPhysicalProperties: p<PhysicalProperties>,
	EnableFluidForces: p<boolean>,
	FrontSurface: p<Enum.SurfaceType>,
	LeftSurface: p<Enum.SurfaceType>,
	LocalTransparencyModifier: p<number>,
	Locked: p<boolean>,
	Massless: p<boolean>,
	Material: p<Enum.Material>,
	MaterialVariant: p<string | number>,
	Orientation: p<Vector3>,
	PivotOffset: p<CFrame>,
	Position: p<Vector3>,
	Reflectance: p<number>,
	RightSurface: p<Enum.SurfaceType>,
	RootPriority: p<number>,
	Rotation: p<Vector3>,
	Size: p<Vector3>,
	TopSurface: p<Enum.SurfaceType>,
	Transparency: p<number>,
	TouchEnded: e<(otherPart:BasePart) -> ()>,
	Touched: e<(otherPart:BasePart) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vPart>

}
export type vModel = {
	ModelStreamingMode: p<Enum.ModelStreamingMode>,
	PrimaryPart: p<BasePart?>,
	WorldPivot: p<CFrame>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vModel>

}
export type vMeshPart = {
	TextureID: p<ContentId>,
	Anchored: p<boolean>,
	AssemblyAngularVelocity: p<Vector3>,
	AssemblyLinearVelocity: p<Vector3>,
	BackSurface: p<Enum.SurfaceType>,
	BottomSurface: p<Enum.SurfaceType>,
	BrickColor: p<BrickColor>,
	CFrame: p<CFrame>,
	CanCollide: p<boolean>,
	CanQuery: p<boolean>,
	CanTouch: p<boolean>,
	CastShadow: p<boolean>,
	CollisionGroup: p<string | number>,
	Color: p<Color3>,
	CustomPhysicalProperties: p<PhysicalProperties>,
	EnableFluidForces: p<boolean>,
	FrontSurface: p<Enum.SurfaceType>,
	LeftSurface: p<Enum.SurfaceType>,
	LocalTransparencyModifier: p<number>,
	Locked: p<boolean>,
	Massless: p<boolean>,
	Material: p<Enum.Material>,
	MaterialVariant: p<string | number>,
	Orientation: p<Vector3>,
	PivotOffset: p<CFrame>,
	Position: p<Vector3>,
	Reflectance: p<number>,
	RightSurface: p<Enum.SurfaceType>,
	RootPriority: p<number>,
	Rotation: p<Vector3>,
	Size: p<Vector3>,
	TopSurface: p<Enum.SurfaceType>,
	Transparency: p<number>,
	TouchEnded: e<(otherPart:BasePart) -> ()>,
	Touched: e<(otherPart:BasePart) -> ()>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vMeshPart>

}
export type vHighlight = {
	Adornee: p<Instance?>,
	DepthMode: p<Enum.HighlightDepthMode>,
	Enabled: p<boolean>,
	FillColor: p<Color3>,
	FillTransparency: p<number>,
	OutlineColor: p<Color3>,
	OutlineTransparency: p<number>,
	Archivable: p<boolean>,
	Name: p<string | number>,
	Parent: p<Instance?>,
	AncestryChanged: e<(child:Instance?,parent:Instance?) -> ()>,
	AttributeChanged: e<(attribute:string | number) -> ()>,
	Changed: e<(property:string | number) -> ()>,
	ChildAdded: e<(child:Instance?) -> ()>,
	ChildRemoved: e<(child:Instance?) -> ()>,
	DescendantAdded: e<(descendant:Instance?) -> ()>,
	DescendantRemoving: e<(descendant:Instance?) -> ()>,
	Destroying: e<() -> ()>,
	[number]: c<vHighlight>

}
return{}