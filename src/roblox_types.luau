type p<T> = T?|()->T
type e<T=()->()> = T?
type a={priority: number, callback: (Instance) -> ()}
type recursive<T> =T|{recursive<T>}
type c<T> =a|T|recursive<Instance>|()->recursive<Instance>
type ContentId = string
type Dictionary = {[string]: any}
type Array = {any}
export type vCanvasGroup = {
	group_color3: p<Color3>,
	group_transparency: p<number>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vCanvasGroup>

}
export type vFrame = {
	style: p<Enum.FrameStyle>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vFrame>

}
export type vImageButton = {
	hover_image: p<ContentId>,
	image: p<ContentId>,
	image_color3: p<Color3>,
	image_content: p<string>,
	image_rect_offset: p<Vector2>,
	image_rect_size: p<Vector2>,
	image_transparency: p<number>,
	pressed_image: p<ContentId>,
	resample_mode: p<Enum.ResamplerMode>,
	scale_type: p<Enum.ScaleType>,
	slice_center: p<Rect>,
	slice_scale: p<number>,
	tile_size: p<UDim2>,
	auto_button_color: p<boolean>,
	modal: p<boolean>,
	selected: p<boolean>,
	style: p<Enum.ButtonStyle>,
	activated: e<(inputObject:InputObject?,clickCount:number) -> ()>,
	mouse_button1_click: e<() -> ()>,
	mouse_button1_down: e<(x:number,y:number) -> ()>,
	mouse_button1_up: e<(x:number,y:number) -> ()>,
	mouse_button2_click: e<() -> ()>,
	mouse_button2_down: e<(x:number,y:number) -> ()>,
	mouse_button2_up: e<(x:number,y:number) -> ()>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vImageButton>

}
export type vTextButton = {
	font: p<Enum.Font>,
	font_face: p<Font>,
	line_height: p<number>,
	max_visible_graphemes: p<number>,
	open_type_features: p<string | number>,
	rich_text: p<boolean>,
	text: p<string | number>,
	text_color3: p<Color3>,
	text_direction: p<Enum.TextDirection>,
	text_scaled: p<boolean>,
	text_size: p<number>,
	text_stroke_color3: p<Color3>,
	text_stroke_transparency: p<number>,
	text_transparency: p<number>,
	text_truncate: p<Enum.TextTruncate>,
	text_wrapped: p<boolean>,
	text_x_alignment: p<Enum.TextXAlignment>,
	text_y_alignment: p<Enum.TextYAlignment>,
	auto_button_color: p<boolean>,
	modal: p<boolean>,
	selected: p<boolean>,
	style: p<Enum.ButtonStyle>,
	activated: e<(inputObject:InputObject?,clickCount:number) -> ()>,
	mouse_button1_click: e<() -> ()>,
	mouse_button1_down: e<(x:number,y:number) -> ()>,
	mouse_button1_up: e<(x:number,y:number) -> ()>,
	mouse_button2_click: e<() -> ()>,
	mouse_button2_down: e<(x:number,y:number) -> ()>,
	mouse_button2_up: e<(x:number,y:number) -> ()>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vTextButton>

}
export type vImageLabel = {
	image: p<ContentId>,
	image_color3: p<Color3>,
	image_content: p<string>,
	image_rect_offset: p<Vector2>,
	image_rect_size: p<Vector2>,
	image_transparency: p<number>,
	resample_mode: p<Enum.ResamplerMode>,
	scale_type: p<Enum.ScaleType>,
	slice_center: p<Rect>,
	slice_scale: p<number>,
	tile_size: p<UDim2>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vImageLabel>

}
export type vTextLabel = {
	font: p<Enum.Font>,
	font_face: p<Font>,
	line_height: p<number>,
	max_visible_graphemes: p<number>,
	open_type_features: p<string | number>,
	rich_text: p<boolean>,
	text: p<string | number>,
	text_color3: p<Color3>,
	text_direction: p<Enum.TextDirection>,
	text_scaled: p<boolean>,
	text_size: p<number>,
	text_stroke_color3: p<Color3>,
	text_stroke_transparency: p<number>,
	text_transparency: p<number>,
	text_truncate: p<Enum.TextTruncate>,
	text_wrapped: p<boolean>,
	text_x_alignment: p<Enum.TextXAlignment>,
	text_y_alignment: p<Enum.TextYAlignment>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vTextLabel>

}
export type vScrollingFrame = {
	automatic_canvas_size: p<Enum.AutomaticSize>,
	bottom_image: p<ContentId>,
	canvas_position: p<Vector2>,
	canvas_size: p<UDim2>,
	elastic_behavior: p<Enum.ElasticBehavior>,
	horizontal_scroll_bar_inset: p<Enum.ScrollBarInset>,
	mid_image: p<ContentId>,
	scroll_bar_image_color3: p<Color3>,
	scroll_bar_image_transparency: p<number>,
	scroll_bar_thickness: p<number>,
	scrolling_direction: p<Enum.ScrollingDirection>,
	scrolling_enabled: p<boolean>,
	top_image: p<ContentId>,
	vertical_scroll_bar_inset: p<Enum.ScrollBarInset>,
	vertical_scroll_bar_position: p<Enum.VerticalScrollBarPosition>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vScrollingFrame>

}
export type vTextBox = {
	clear_text_on_focus: p<boolean>,
	cursor_position: p<number>,
	font: p<Enum.Font>,
	font_face: p<Font>,
	line_height: p<number>,
	max_visible_graphemes: p<number>,
	multi_line: p<boolean>,
	open_type_features: p<string | number>,
	placeholder_color3: p<Color3>,
	placeholder_text: p<string | number>,
	rich_text: p<boolean>,
	selection_start: p<number>,
	show_native_input: p<boolean>,
	text: p<string | number>,
	text_color3: p<Color3>,
	text_direction: p<Enum.TextDirection>,
	text_editable: p<boolean>,
	text_scaled: p<boolean>,
	text_size: p<number>,
	text_stroke_color3: p<Color3>,
	text_stroke_transparency: p<number>,
	text_transparency: p<number>,
	text_truncate: p<Enum.TextTruncate>,
	text_wrapped: p<boolean>,
	text_x_alignment: p<Enum.TextXAlignment>,
	text_y_alignment: p<Enum.TextYAlignment>,
	focus_lost: e<(enterPressed:boolean,inputThatCausedFocusLoss:InputObject?) -> ()>,
	focused: e<() -> ()>,
	return_pressed_from_on_screen_keyboard: e<() -> ()>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vTextBox>

}
export type vVideoFrame = {
	looped: p<boolean>,
	playing: p<boolean>,
	time_position: p<number>,
	video: p<ContentId>,
	volume: p<number>,
	did_loop: e<(video:string | number) -> ()>,
	ended: e<(video:string | number) -> ()>,
	loaded: e<(video:string | number) -> ()>,
	paused: e<(video:string | number) -> ()>,
	played: e<(video:string | number) -> ()>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vVideoFrame>

}
export type vViewportFrame = {
	ambient: p<Color3>,
	current_camera: p<Camera?>,
	image_color3: p<Color3>,
	image_transparency: p<number>,
	light_color: p<Color3>,
	light_direction: p<Vector3>,
	active: p<boolean>,
	anchor_point: p<Vector2>,
	automatic_size: p<Enum.AutomaticSize>,
	background_color3: p<Color3>,
	background_transparency: p<number>,
	border_color3: p<Color3>,
	border_mode: p<Enum.BorderMode>,
	border_size_pixel: p<number>,
	clips_descendants: p<boolean>,
	interactable: p<boolean>,
	layout_order: p<number>,
	next_selection_down: p<GuiObject?>,
	next_selection_left: p<GuiObject?>,
	next_selection_right: p<GuiObject?>,
	next_selection_up: p<GuiObject?>,
	position: p<UDim2>,
	rotation: p<number>,
	selectable: p<boolean>,
	selection_image_object: p<GuiObject?>,
	selection_order: p<number>,
	size: p<UDim2>,
	size_constraint: p<Enum.SizeConstraint>,
	transparency: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	input_began: e<(input:InputObject) -> ()>,
	input_changed: e<(input:InputObject) -> ()>,
	input_ended: e<(input:InputObject) -> ()>,
	mouse_enter: e<(x:number,y:number) -> ()>,
	mouse_leave: e<(x:number,y:number) -> ()>,
	mouse_moved: e<(x:number,y:number) -> ()>,
	mouse_wheel_backward: e<(x:number,y:number) -> ()>,
	mouse_wheel_forward: e<(x:number,y:number) -> ()>,
	selection_gained: e<() -> ()>,
	selection_lost: e<() -> ()>,
	touch_long_press: e<(touchPositions:Array,state:Enum.UserInputState) -> ()>,
	touch_pan: e<(touchPositions:Array,totalTranslation:Vector2,velocity:Vector2,state:Enum.UserInputState) -> ()>,
	touch_pinch: e<(touchPositions:Array,scale:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_rotate: e<(touchPositions:Array,rotation:number,velocity:number,state:Enum.UserInputState) -> ()>,
	touch_swipe: e<(swipeDirection:Enum.SwipeDirection,numberOfTouches:number) -> ()>,
	touch_tap: e<(touchPositions:Array) -> ()>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vViewportFrame>

}
export type vBillboardGui = {
	active: p<boolean>,
	adornee: p<Instance?>,
	always_on_top: p<boolean>,
	brightness: p<number>,
	clips_descendants: p<boolean>,
	distance_lower_limit: p<number>,
	distance_step: p<number>,
	distance_upper_limit: p<number>,
	extents_offset: p<Vector3>,
	extents_offset_world_space: p<Vector3>,
	light_influence: p<number>,
	max_distance: p<number>,
	player_to_hide_from: p<Instance?>,
	size: p<UDim2>,
	size_offset: p<Vector2>,
	studs_offset: p<Vector3>,
	studs_offset_world_space: p<Vector3>,
	enabled: p<boolean>,
	reset_on_spawn: p<boolean>,
	z_index_behavior: p<Enum.ZIndexBehavior>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vBillboardGui>

}
export type vScreenGui = {
	clip_to_device_safe_area: p<boolean>,
	display_order: p<number>,
	ignore_gui_inset: p<boolean>,
	safe_area_compatibility: p<Enum.SafeAreaCompatibility>,
	screen_insets: p<Enum.ScreenInsets>,
	enabled: p<boolean>,
	reset_on_spawn: p<boolean>,
	z_index_behavior: p<Enum.ZIndexBehavior>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vScreenGui>

}
export type vAdGui = {
	ad_shape: p<Enum.AdShape>,
	enable_video_ads: p<boolean>,
	fallback_image: p<ContentId>,
	active: p<boolean>,
	adornee: p<Instance?>,
	face: p<Enum.NormalId>,
	enabled: p<boolean>,
	reset_on_spawn: p<boolean>,
	z_index_behavior: p<Enum.ZIndexBehavior>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vAdGui>

}
export type vSurfaceGui = {
	always_on_top: p<boolean>,
	brightness: p<number>,
	canvas_size: p<Vector2>,
	clips_descendants: p<boolean>,
	light_influence: p<number>,
	max_distance: p<number>,
	pixels_per_stud: p<number>,
	sizing_mode: p<Enum.SurfaceGuiSizingMode>,
	tool_punch_through_distance: p<number>,
	z_offset: p<number>,
	active: p<boolean>,
	adornee: p<Instance?>,
	face: p<Enum.NormalId>,
	enabled: p<boolean>,
	reset_on_spawn: p<boolean>,
	z_index_behavior: p<Enum.ZIndexBehavior>,
	auto_localize: p<boolean>,
	root_localization_table: p<LocalizationTable?>,
	selection_behavior_down: p<Enum.SelectionBehavior>,
	selection_behavior_left: p<Enum.SelectionBehavior>,
	selection_behavior_right: p<Enum.SelectionBehavior>,
	selection_behavior_up: p<Enum.SelectionBehavior>,
	selection_group: p<boolean>,
	selection_changed: e<(amISelected:boolean,previousSelection:GuiObject?,newSelection:GuiObject?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vSurfaceGui>

}
export type vSelectionBox = {
	line_thickness: p<number>,
	surface_color3: p<Color3>,
	surface_transparency: p<number>,
	adornee: p<Instance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vSelectionBox>

}
export type vBoxHandleAdornment = {
	size: p<Vector3>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vBoxHandleAdornment>

}
export type vConeHandleAdornment = {
	height: p<number>,
	radius: p<number>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vConeHandleAdornment>

}
export type vCylinderHandleAdornment = {
	angle: p<number>,
	height: p<number>,
	inner_radius: p<number>,
	radius: p<number>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vCylinderHandleAdornment>

}
export type vImageHandleAdornment = {
	image: p<ContentId>,
	size: p<Vector2>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vImageHandleAdornment>

}
export type vLineHandleAdornment = {
	length: p<number>,
	thickness: p<number>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vLineHandleAdornment>

}
export type vSphereHandleAdornment = {
	radius: p<number>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vSphereHandleAdornment>

}
export type vWireframeHandleAdornment = {
	scale: p<Vector3>,
	adorn_culling_mode: p<Enum.AdornCullingMode>,
	always_on_top: p<boolean>,
	c_frame: p<CFrame>,
	size_relative_offset: p<Vector3>,
	z_index: p<number>,
	mouse_button1_down: e<() -> ()>,
	mouse_button1_up: e<() -> ()>,
	mouse_enter: e<() -> ()>,
	mouse_leave: e<() -> ()>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vWireframeHandleAdornment>

}
export type vParabolaAdornment = {
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vParabolaAdornment>

}
export type vSelectionSphere = {
	surface_color3: p<Color3>,
	surface_transparency: p<number>,
	adornee: p<PVInstance?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vSelectionSphere>

}
export type vArcHandles = {
	axes: p<Axes>,
	mouse_button1_down: e<(axis:Enum.Axis) -> ()>,
	mouse_button1_up: e<(axis:Enum.Axis) -> ()>,
	mouse_drag: e<(axis:Enum.Axis,relativeAngle:number,deltaRadius:number) -> ()>,
	mouse_enter: e<(axis:Enum.Axis) -> ()>,
	mouse_leave: e<(axis:Enum.Axis) -> ()>,
	adornee: p<BasePart?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vArcHandles>

}
export type vHandles = {
	faces: p<Faces>,
	style: p<Enum.HandlesStyle>,
	mouse_button1_down: e<(face:Enum.NormalId) -> ()>,
	mouse_button1_up: e<(face:Enum.NormalId) -> ()>,
	mouse_drag: e<(face:Enum.NormalId,distance:number) -> ()>,
	mouse_enter: e<(face:Enum.NormalId) -> ()>,
	mouse_leave: e<(face:Enum.NormalId) -> ()>,
	adornee: p<BasePart?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vHandles>

}
export type vSurfaceSelection = {
	target_surface: p<Enum.NormalId>,
	adornee: p<BasePart?>,
	color3: p<Color3>,
	transparency: p<number>,
	visible: p<boolean>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vSurfaceSelection>

}
export type vPath2D = {
	closed: p<boolean>,
	color3: p<Color3>,
	thickness: p<number>,
	visible: p<boolean>,
	z_index: p<number>,
	control_point_changed: e<() -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vPath2D>

}
export type vUIAspectRatioConstraint = {
	aspect_ratio: p<number>,
	aspect_type: p<Enum.AspectType>,
	dominant_axis: p<Enum.DominantAxis>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIAspectRatioConstraint>

}
export type vUISizeConstraint = {
	max_size: p<Vector2>,
	min_size: p<Vector2>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUISizeConstraint>

}
export type vUITextSizeConstraint = {
	max_text_size: p<number>,
	min_text_size: p<number>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUITextSizeConstraint>

}
export type vUICorner = {
	corner_radius: p<UDim>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUICorner>

}
export type vUIDragDetector = {
	activated_cursor_icon: p<ContentId>,
	bounding_behavior: p<Enum.UIDragDetectorBoundingBehavior>,
	bounding_u_i: p<GuiBase2d?>,
	cursor_icon: p<ContentId>,
	drag_axis: p<Vector2>,
	drag_relativity: p<Enum.UIDragDetectorDragRelativity>,
	drag_rotation: p<number>,
	drag_space: p<Enum.UIDragDetectorDragSpace>,
	drag_style: p<Enum.UIDragDetectorDragStyle>,
	drag_u_dim2: p<UDim2>,
	enabled: p<boolean>,
	max_drag_angle: p<number>,
	max_drag_translation: p<UDim2>,
	min_drag_angle: p<number>,
	min_drag_translation: p<UDim2>,
	reference_u_i_instance: p<GuiObject?>,
	response_style: p<Enum.UIDragDetectorResponseStyle>,
	selection_mode_drag_speed: p<UDim2>,
	selection_mode_rotate_speed: p<number>,
	u_i_drag_speed_axis_mapping: p<Enum.UIDragSpeedAxisMapping>,
	drag_continue: e<(inputPosition:Vector2) -> ()>,
	drag_end: e<(inputPosition:Vector2) -> ()>,
	drag_start: e<(inputPosition:Vector2) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIDragDetector>

}
export type vUIFlexItem = {
	flex_mode: p<Enum.UIFlexMode>,
	grow_ratio: p<number>,
	item_line_alignment: p<Enum.ItemLineAlignment>,
	shrink_ratio: p<number>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIFlexItem>

}
export type vUIGradient = {
	color: p<ColorSequence>,
	enabled: p<boolean>,
	offset: p<Vector2>,
	rotation: p<number>,
	transparency: p<NumberSequence>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIGradient>

}
export type vUIListLayout = {
	horizontal_flex: p<Enum.UIFlexAlignment>,
	item_line_alignment: p<Enum.ItemLineAlignment>,
	padding: p<UDim>,
	vertical_flex: p<Enum.UIFlexAlignment>,
	wraps: p<boolean>,
	fill_direction: p<Enum.FillDirection>,
	horizontal_alignment: p<Enum.HorizontalAlignment>,
	sort_order: p<Enum.SortOrder>,
	vertical_alignment: p<Enum.VerticalAlignment>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIListLayout>

}
export type vUIGridLayout = {
	cell_padding: p<UDim2>,
	cell_size: p<UDim2>,
	fill_direction_max_cells: p<number>,
	start_corner: p<Enum.StartCorner>,
	fill_direction: p<Enum.FillDirection>,
	horizontal_alignment: p<Enum.HorizontalAlignment>,
	sort_order: p<Enum.SortOrder>,
	vertical_alignment: p<Enum.VerticalAlignment>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIGridLayout>

}
export type vUIPageLayout = {
	animated: p<boolean>,
	circular: p<boolean>,
	easing_direction: p<Enum.EasingDirection>,
	easing_style: p<Enum.EasingStyle>,
	gamepad_input_enabled: p<boolean>,
	padding: p<UDim>,
	scroll_wheel_input_enabled: p<boolean>,
	touch_input_enabled: p<boolean>,
	tween_time: p<number>,
	page_enter: e<(page:Instance?) -> ()>,
	page_leave: e<(page:Instance?) -> ()>,
	stopped: e<(currentPage:Instance?) -> ()>,
	fill_direction: p<Enum.FillDirection>,
	horizontal_alignment: p<Enum.HorizontalAlignment>,
	sort_order: p<Enum.SortOrder>,
	vertical_alignment: p<Enum.VerticalAlignment>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIPageLayout>

}
export type vUITableLayout = {
	fill_empty_space_columns: p<boolean>,
	fill_empty_space_rows: p<boolean>,
	major_axis: p<Enum.TableMajorAxis>,
	padding: p<UDim2>,
	fill_direction: p<Enum.FillDirection>,
	horizontal_alignment: p<Enum.HorizontalAlignment>,
	sort_order: p<Enum.SortOrder>,
	vertical_alignment: p<Enum.VerticalAlignment>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUITableLayout>

}
export type vUIPadding = {
	padding_bottom: p<UDim>,
	padding_left: p<UDim>,
	padding_right: p<UDim>,
	padding_top: p<UDim>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIPadding>

}
export type vUIScale = {
	scale: p<number>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIScale>

}
export type vUIStroke = {
	apply_stroke_mode: p<Enum.ApplyStrokeMode>,
	color: p<Color3>,
	enabled: p<boolean>,
	line_join_mode: p<Enum.LineJoinMode>,
	thickness: p<number>,
	transparency: p<number>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vUIStroke>

}
export type vWorldModel = {
	model_streaming_mode: p<Enum.ModelStreamingMode>,
	primary_part: p<BasePart?>,
	world_pivot: p<CFrame>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vWorldModel>

}
export type vCamera = {
	c_frame: p<CFrame>,
	camera_subject: p<Instance?>,
	camera_type: p<Enum.CameraType>,
	diagonal_field_of_view: p<number>,
	field_of_view: p<number>,
	field_of_view_mode: p<Enum.FieldOfViewMode>,
	focus: p<CFrame>,
	head_locked: p<boolean>,
	head_scale: p<number>,
	max_axis_field_of_view: p<number>,
	v_r_tilt_and_roll_enabled: p<boolean>,
	interpolation_finished: e<() -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vCamera>

}
export type vPart = {
	shape: p<Enum.PartType>,
	anchored: p<boolean>,
	assembly_angular_velocity: p<Vector3>,
	assembly_linear_velocity: p<Vector3>,
	back_surface: p<Enum.SurfaceType>,
	bottom_surface: p<Enum.SurfaceType>,
	brick_color: p<BrickColor>,
	c_frame: p<CFrame>,
	can_collide: p<boolean>,
	can_query: p<boolean>,
	can_touch: p<boolean>,
	cast_shadow: p<boolean>,
	collision_group: p<string | number>,
	color: p<Color3>,
	custom_physical_properties: p<PhysicalProperties>,
	enable_fluid_forces: p<boolean>,
	front_surface: p<Enum.SurfaceType>,
	left_surface: p<Enum.SurfaceType>,
	local_transparency_modifier: p<number>,
	locked: p<boolean>,
	massless: p<boolean>,
	material: p<Enum.Material>,
	material_variant: p<string | number>,
	orientation: p<Vector3>,
	pivot_offset: p<CFrame>,
	position: p<Vector3>,
	reflectance: p<number>,
	right_surface: p<Enum.SurfaceType>,
	root_priority: p<number>,
	rotation: p<Vector3>,
	size: p<Vector3>,
	top_surface: p<Enum.SurfaceType>,
	transparency: p<number>,
	touch_ended: e<(otherPart:BasePart?) -> ()>,
	touched: e<(otherPart:BasePart?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vPart>

}
export type vModel = {
	model_streaming_mode: p<Enum.ModelStreamingMode>,
	primary_part: p<BasePart?>,
	world_pivot: p<CFrame>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vModel>

}
export type vMeshPart = {
	texture_content: p<string>,
	texture_i_d: p<ContentId>,
	anchored: p<boolean>,
	assembly_angular_velocity: p<Vector3>,
	assembly_linear_velocity: p<Vector3>,
	back_surface: p<Enum.SurfaceType>,
	bottom_surface: p<Enum.SurfaceType>,
	brick_color: p<BrickColor>,
	c_frame: p<CFrame>,
	can_collide: p<boolean>,
	can_query: p<boolean>,
	can_touch: p<boolean>,
	cast_shadow: p<boolean>,
	collision_group: p<string | number>,
	color: p<Color3>,
	custom_physical_properties: p<PhysicalProperties>,
	enable_fluid_forces: p<boolean>,
	front_surface: p<Enum.SurfaceType>,
	left_surface: p<Enum.SurfaceType>,
	local_transparency_modifier: p<number>,
	locked: p<boolean>,
	massless: p<boolean>,
	material: p<Enum.Material>,
	material_variant: p<string | number>,
	orientation: p<Vector3>,
	pivot_offset: p<CFrame>,
	position: p<Vector3>,
	reflectance: p<number>,
	right_surface: p<Enum.SurfaceType>,
	root_priority: p<number>,
	rotation: p<Vector3>,
	size: p<Vector3>,
	top_surface: p<Enum.SurfaceType>,
	transparency: p<number>,
	touch_ended: e<(otherPart:BasePart?) -> ()>,
	touched: e<(otherPart:BasePart?) -> ()>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vMeshPart>

}
export type vHighlight = {
	adornee: p<Instance?>,
	depth_mode: p<Enum.HighlightDepthMode>,
	enabled: p<boolean>,
	fill_color: p<Color3>,
	fill_transparency: p<number>,
	outline_color: p<Color3>,
	outline_transparency: p<number>,
	archivable: p<boolean>,
	name: p<string | number>,
	parent: p<Instance?>,
	ancestry_changed: e<(child:Instance?,parent:Instance?) -> ()>,
	attribute_changed: e<(attribute:string | number) -> ()>,
	child_added: e<(child:Instance?) -> ()>,
	child_removed: e<(child:Instance?) -> ()>,
	descendant_added: e<(descendant:Instance?) -> ()>,
	descendant_removing: e<(descendant:Instance?) -> ()>,
	destroying: e<() -> ()>,
	changed: e<(property:string | number) -> ()>,
	[number]: c<vHighlight>

}
return{}